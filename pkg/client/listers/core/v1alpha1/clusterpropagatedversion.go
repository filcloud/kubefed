/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "sigs.k8s.io/kubefed/pkg/apis/core/v1alpha1"
)

// ClusterPropagatedVersionLister helps list ClusterPropagatedVersions.
type ClusterPropagatedVersionLister interface {
	// List lists all ClusterPropagatedVersions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterPropagatedVersion, err error)
	// ClusterPropagatedVersions returns an object that can list and get ClusterPropagatedVersions.
	ClusterPropagatedVersions(namespace string) ClusterPropagatedVersionNamespaceLister
	ClusterPropagatedVersionListerExpansion
}

// clusterPropagatedVersionLister implements the ClusterPropagatedVersionLister interface.
type clusterPropagatedVersionLister struct {
	indexer cache.Indexer
}

// NewClusterPropagatedVersionLister returns a new ClusterPropagatedVersionLister.
func NewClusterPropagatedVersionLister(indexer cache.Indexer) ClusterPropagatedVersionLister {
	return &clusterPropagatedVersionLister{indexer: indexer}
}

// List lists all ClusterPropagatedVersions in the indexer.
func (s *clusterPropagatedVersionLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterPropagatedVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterPropagatedVersion))
	})
	return ret, err
}

// ClusterPropagatedVersions returns an object that can list and get ClusterPropagatedVersions.
func (s *clusterPropagatedVersionLister) ClusterPropagatedVersions(namespace string) ClusterPropagatedVersionNamespaceLister {
	return clusterPropagatedVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterPropagatedVersionNamespaceLister helps list and get ClusterPropagatedVersions.
type ClusterPropagatedVersionNamespaceLister interface {
	// List lists all ClusterPropagatedVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterPropagatedVersion, err error)
	// Get retrieves the ClusterPropagatedVersion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterPropagatedVersion, error)
	ClusterPropagatedVersionNamespaceListerExpansion
}

// clusterPropagatedVersionNamespaceLister implements the ClusterPropagatedVersionNamespaceLister
// interface.
type clusterPropagatedVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterPropagatedVersions in the indexer for a given namespace.
func (s clusterPropagatedVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterPropagatedVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterPropagatedVersion))
	})
	return ret, err
}

// Get retrieves the ClusterPropagatedVersion from the indexer for a given namespace and name.
func (s clusterPropagatedVersionNamespaceLister) Get(name string) (*v1alpha1.ClusterPropagatedVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterpropagatedversion"), name)
	}
	return obj.(*v1alpha1.ClusterPropagatedVersion), nil
}
